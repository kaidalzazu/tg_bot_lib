from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import os
import logging
from handlers import book_handlers
from handlers import reader_handlers
from handlers import loan_handlers

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(
    filename='logs.txt',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# --- –°–û–°–¢–û–Ø–ù–ò–Ø ---
STATE_REGISTER = "register"

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    registered = await reader_handlers.register_reader(update, context)

    if not registered:
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['state'] = STATE_REGISTER
    else:
        context.user_data.clear()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    if state == STATE_REGISTER:
        text = update.message.text.strip()
        parts = text.split()
        if len(parts) < 3:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ò–í–¢-23")
            return

        name = ' '.join(parts[:2])
        group = ' '.join(parts[2:])

        conn = None
        try:
            conn = sqlite3.connect('library.db')
            cur = conn.cursor()
            cur.execute("INSERT INTO readers(telegram_id, name, group_department) VALUES(?,?,?)",
                        (update.effective_user.id, name, group))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {name} –∏–∑ {group}!", reply_markup=loan_handlers.MAIN_MENU)
            context.user_data.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        finally:
            if conn:
                conn.close()
    elif update.message.text.lower() == "üì¶ –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏:")
    elif update.message.text.lower() == "‚Æø –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –≤—ã–¥–∞—á–∏ (–Ω–µ ID –∫–Ω–∏–≥–∏):")
    elif update.message.text.lower() == "üìö –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏":
        await book_handlers.list_books(update, context)
    elif update.message.text.lower() == "üìñ –º–æ–∏ –∫–Ω–∏–≥–∏":
        await loan_handlers.my_books(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=loan_handlers.MAIN_MENU)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("books", book_handlers.list_books))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()