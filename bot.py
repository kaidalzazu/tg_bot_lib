# bot.py

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv
import os
import logging
from handlers import book_handlers, reader_handlers, loan_handlers
import sqlite3
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename='logs.txt',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
from config import MAIN_MENU, STATE_AWAITING_ISSUE, STATE_AWAITING_RETURN

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞"""
    await reader_handlers.register_reader(update, context)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    state = context.user_data.get('state')

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    if state == "register":
        parts = text.split()
        if len(parts) < 3:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ò–í–¢-23")
            return

        name = ' '.join(parts[:2])
        group = ' '.join(parts[2:])
        telegram_id = update.effective_user.id

        conn = None
        try:
            conn = sqlite3.connect('library.db')
            cur = conn.cursor()
            cur.execute("INSERT INTO readers(telegram_id, name, group_department) VALUES(?,?,?)",
                        (telegram_id, name, group))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {name} –∏–∑ {group}!")
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU)
            context.user_data.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            if conn:
                conn.close()

    # --- –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É ---
    elif context.user_data.get('state') == STATE_AWAITING_ISSUE:
        try:
            book_id = int(text)
            context.args = [str(book_id)]
            await loan_handlers.issue_book(update, context)
            context.user_data.pop('state', None)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–Ω–∏–≥–∏.", reply_markup=MAIN_MENU)

    # --- –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É ---
    elif context.user_data.get('state') == STATE_AWAITING_RETURN:
        try:
            loan_id = int(text)
            context.args = [str(loan_id)]
            await loan_handlers.return_book(update, context)
            context.user_data.pop('state', None)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤—ã–¥–∞—á–∏.", reply_markup=MAIN_MENU)

    # --- –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ---
    elif text == "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏":
        await book_handlers.list_books(update, context)

    elif text == "üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏":
        await loan_handlers.my_books(update, context)

    elif text == "üì¶ –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:")
        context.user_data['state'] = STATE_AWAITING_ISSUE

    elif text == "‚Æø –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –≤—ã–¥–∞—á–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:")
        context.user_data['state'] = STATE_AWAITING_RETURN

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=MAIN_MENU)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("books", book_handlers.list_books))
    app.add_handler(CommandHandler("add_book", book_handlers.add_book))
    app.add_handler(CommandHandler("my_books", loan_handlers.my_books))
    app.add_handler(CommandHandler("issue", loan_handlers.issue_book))
    app.add_handler(CommandHandler("return", loan_handlers.return_book))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == '__main__':
    main()