# handlers/book_handlers.py

from telegram import Update
from telegram.ext import ContextTypes
import sqlite3
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MAIN_MENU ---
try:
    from config import MAIN_MENU
except ImportError:
    logger.critical("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config.py")
    raise


# --- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ ---
async def add_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args

    if len(args) < 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_book –ù–∞–∑–≤–∞–Ω–∏–µ –ê–≤—Ç–æ—Ä –ì–æ–¥ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π_–Ω–æ–º–µ—Ä")
        return

    try:
        title = ' '.join(args[:-3])
        author = args[-3]
        year = int(args[-2])
        inv_num = args[-1]

        conn = sqlite3.connect('library.db')
        cur = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        cur.execute("SELECT * FROM books WHERE inventory_number=?", (inv_num,))
        if cur.fetchone():
            await update.message.reply_text("‚ùå –ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
        cur.execute("INSERT INTO books(title, author, year, inventory_number) VALUES(?,?,?,?)",
                    (title, author, year, inv_num))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –ö–Ω–∏–≥–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=MAIN_MENU)
    except ValueError:
        logger.error("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        await update.message.reply_text("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=MAIN_MENU)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=MAIN_MENU)
    finally:
        conn.close()


# --- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ ---
async def list_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = None
    try:
        conn = sqlite3.connect('library.db')
        cur = conn.cursor()
        cur.execute("SELECT id, title, author, year, inventory_number FROM books WHERE quantity > 0")
        rows = cur.fetchall()
        msg = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
        for row in rows:
            msg += f"ID: {row[0]} ‚Äî {row[1]} ({row[2]}, {row[3]}, ‚Ññ{row[4]})\n"
        await update.message.reply_text(msg or "–ö–Ω–∏–≥ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.", reply_markup=MAIN_MENU)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥.")
    finally:
        if conn:
            conn.close()