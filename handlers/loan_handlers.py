# handlers/loan_handlers.py

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
import sqlite3
import logging

logger = logging.getLogger(__name__)

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MAIN_MENU ---
try:
    from config import MAIN_MENU, STATE_AWAITING_ISSUE, STATE_AWAITING_RETURN
except ImportError:
    logger.critical("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config.py")
    raise

# --- –í—ã–¥–∞—á–∞ –∫–Ω–∏–≥–∏ ---
async def issue_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:")
        context.user_data['state'] = STATE_AWAITING_ISSUE
        return

    try:
        book_id = int(args[0])
        telegram_id = update.effective_user.id
        conn = sqlite3.connect('library.db')
        cur = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–∏–≥–∏
        cur.execute("SELECT quantity FROM books WHERE id=?", (book_id,))
        qty_row = cur.fetchone()
        if not qty_row or qty_row[0] <= 0:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=MAIN_MENU)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("SELECT id FROM readers WHERE telegram_id=?", (telegram_id,))
        reader_row = cur.fetchone()
        if not reader_row:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start", reply_markup=MAIN_MENU)
            return

        reader_id = reader_row[0]
        today = datetime.now().strftime("%Y-%m-%d")

        # –í—ã–¥–∞—ë–º –∫–Ω–∏–≥—É
        cur.execute("INSERT INTO loans(book_id, reader_id, issue_date) VALUES(?,?,?)",
                    (book_id, reader_id, today))
        cur.execute("UPDATE books SET quantity = quantity - 1 WHERE id=?", (book_id,))
        conn.commit()
        due = (datetime.now() + timedelta(days=14)).strftime("%Y-%m-%d")
        await update.message.reply_text(f"‚úÖ –ö–Ω–∏–≥–∞ {book_id} –≤—ã–¥–∞–Ω–∞ –¥–æ {due}.", reply_markup=MAIN_MENU)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–Ω–∏–≥–∏.", reply_markup=MAIN_MENU)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=MAIN_MENU)
    finally:
        conn.close()


# --- –í–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏ ---
async def return_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –≤—ã–¥–∞—á–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:")
        context.user_data['state'] = STATE_AWAITING_RETURN
        return

    try:
        loan_id = int(args[0])
        conn = sqlite3.connect('library.db')
        cur = conn.cursor()

        cur.execute("SELECT book_id FROM loans WHERE id=? AND return_date IS NULL", (loan_id,))
        res = cur.fetchone()
        if not res:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –≤—ã–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", reply_markup=MAIN_MENU)
            return

        book_id = res[0]
        today = datetime.now().strftime("%Y-%m-%d")

        cur.execute("UPDATE loans SET return_date = ? WHERE id = ?", (today, loan_id))
        cur.execute("UPDATE books SET quantity = quantity + 1 WHERE id = ?", (book_id,))
        conn.commit()
        await update.message.reply_text(f"üì¶ –ö–Ω–∏–≥–∞ {book_id} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", reply_markup=MAIN_MENU)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤—ã–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=MAIN_MENU)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}", reply_markup=MAIN_MENU)
    finally:
        conn.close()


# --- –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–Ω–∏–≥ ---
async def my_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = None
    try:
        conn = sqlite3.connect('library.db')
        cur = conn.cursor()
        cur.execute("""SELECT l.id, b.title, l.issue_date 
                       FROM loans l
                       JOIN books b ON l.book_id = b.id
                       WHERE l.reader_id = (SELECT id FROM readers WHERE telegram_id = ?) AND l.return_date IS NULL""",
                    (user_id,))
        rows = cur.fetchall()
        msg = "üìñ –í–∞—à–∏ –∫–Ω–∏–≥–∏:\n"
        for row in rows:
            msg += f"–í—ã–¥–∞—á–∞ #{row[0]} ‚Äî {row[1]} (–≤—ã–¥–∞–Ω–∞ {row[2]})\n"
        await update.message.reply_text(msg or "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.", reply_markup=MAIN_MENU)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        if conn:
            conn.close()