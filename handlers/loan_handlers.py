from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
import sqlite3
from datetime import datetime, timedelta

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [["üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏", "üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏"],
     ["üì¶ –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É", "‚Æø –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É"]],
    resize_keyboard=True
)


async def my_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥, –≤—ã–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = update.effective_user.id
    conn = sqlite3.connect('library.db')
    cur = conn.cursor()

    try:
        cur.execute("""SELECT l.id, b.title, l.issue_date
                       FROM loans l
                                JOIN books b ON l.book_id = b.id
                       WHERE l.reader_id = (SELECT id FROM readers WHERE telegram_id = ?)
                         AND l.return_date IS NULL""",
                    (user_id,))
        rows = cur.fetchall()
        msg = "üìñ –í–∞—à–∏ –∫–Ω–∏–≥–∏:\n"
        for row in rows:
            msg += f"–í—ã–¥–∞—á–∞ #{row[0]} ‚Äî {row[1]} (–≤—ã–¥–∞–Ω–∞ {row[2]})\n"
        await update.message.reply_text(msg or "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.", reply_markup=MAIN_MENU)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}", reply_markup=MAIN_MENU)
    finally:
        conn.close()


async def issue_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞—ë—Ç –∫–Ω–∏–≥—É —á–∏—Ç–∞—Ç–µ–ª—é –ø–æ ID –∫–Ω–∏–≥–∏"""
    args = context.args
    if not args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:")
        return

    try:
        book_id = int(args[0])
        user_id = update.effective_user.id
        conn = sqlite3.connect('library.db')
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º reader_id –ø–æ telegram_id
        cur.execute("SELECT id FROM readers WHERE telegram_id=?", (user_id,))
        reader_row = cur.fetchone()
        if not reader_row:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", reply_markup=MAIN_MENU)
            return

        reader_id = reader_row[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–∏–≥–∏
        cur.execute("SELECT quantity FROM books WHERE id=?", (book_id,))
        qty_row = cur.fetchone()
        if not qty_row or qty_row[0] <= 0:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=MAIN_MENU)
            return

        # –í—ã–¥–∞—ë–º –∫–Ω–∏–≥—É
        today = datetime.now().strftime("%Y-%m-%d")
        due = (datetime.now() + timedelta(days=14)).strftime("%Y-%m-%d")

        cur.execute("INSERT INTO loans(book_id, reader_id, issue_date) VALUES(?,?,?)",
                    (book_id, reader_id, today))
        cur.execute("UPDATE books SET quantity = quantity - 1 WHERE id=?", (book_id,))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –ö–Ω–∏–≥–∞ {book_id} –≤—ã–¥–∞–Ω–∞ –¥–æ {due}.", reply_markup=MAIN_MENU)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–Ω–∏–≥–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ: {e}", reply_markup=MAIN_MENU)
    finally:
        conn.close()


async def return_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–∏–≥—É –ø–æ ID –≤—ã–¥–∞—á–∏"""
    args = context.args
    if not args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –≤—ã–¥–∞—á–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:")
        return